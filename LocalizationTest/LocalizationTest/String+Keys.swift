// 
//  LocalizationTest/String+Keys.swift
//  LocalizableTest
//
//  Auto-generated by Julien Perrenoud on 2/27/2017 at 22:3
//  Copyright (c) 2017 BuddyHopp. All rights reserved. 
//


extension String {

    enum Key: LocalizationKey {
        
        case singleLevel

        enum chat: LocalizationKey {
        
            case categoryTitle(category: String)
            case wrongInput(input: String, solution: String)

            enum topLevel: LocalizationKey {
            
                case test
            }
        }

        enum common: LocalizationKey {
        
            case cancel
            case ok

            enum special {
            
                case another(profile: String)
            }
        }

        enum other: LocalizationKey {
        
            case giuseppe(beautiful: String)
        }

        enum registration: LocalizationKey {
        
            case incorrectPassword
        }
    }

    enum Link: LocalizationKey {
        
        case forgotPassword
        case createPassword
    }
}

// MARK: - Extensions

protocol LocalizationKey {
    
    var rawValue: String { get }
    var parameters: [String: String] { get }
    
    
    
}

extension LocalizationKey {
    
    var rawValue: String {
        return getRawValue(key: self)
    }
    
    var parameters: [String: String] {
        return getParameters(key: self)
    }
}

func getRawValue(key: LocalizationKey) -> String {
    
    switch key {
    case String.Key.common.ok: return "common.ok"
    case String.Key.other.giuseppe: return "other.giuseppe"
    case String.Key.common.cancel: return "common.cancel"
    
//    case String.Key.chat.topLevel: return "chat.topLevel"
        
    default: return "none"
        
    }
    
    
}

func getParameters(key: LocalizationKey) -> [String: String] {
    switch key {
    case String.Key.common.ok: return [:]
    case String.Key.other.giuseppe(let beautiful): return ["beautiful": beautiful]
    case String.Key.common.cancel: return [:]
        
        //    case String.Key.chat.topLevel: return "chat.topLevel"
        
    default: return [:]
        
    }
}

//extension String.Key: LocalizationKey {
//    
//    var rawValue: String {
//        switch self {
//        case .singleLevel: return "singleLevel"
//        }
//    }
//    
//    var parameters: [String: String] {
//        switch self {
//        case .singleLevel: return [:]
//        }
//    }
//}
//
//extension String.Key.chat: LocalizationKey {
//    var rawValue: String {
//        switch self {
//        case .categoryTitle: return "chat.categoryTitle"
//        case .wrongInput: return "chat.wrongInput"
//        }
//    }
//    
//    var parameters: [String: String] {
//        switch self {
//        case .categoryTitle(let category): return ["category": category]
//        case .wrongInput(let input, let solution): return ["input": input, "solution": solution]
//        }
//    }
//}
