// 
//  Strings.swift
//  LocalizationTest
//
//  Auto-generated by Julien Perrenoud on 3/1/2017 at 23:24
//  Copyright (c) 2017 BuddyHopp. All rights reserved. 
//

import Foundation

enum Strings: LocalizationKey {
    
    case keyWithoutFolder
    case otherKeyWithoutFolder

    enum chat: LocalizationKey {
    
        case categoryTitle(category: String)
        case wrongInput(input: String, solution: String)

        enum topBar: LocalizationKey {
        
            case leftButton
            case rightButton
            case subtitle(date: String)
            case title(otherPersonName: String)
        }
    }

    enum common: LocalizationKey {
    
        case cancel
        case greetings(profile: String)
        case ok
    }

    enum registration: LocalizationKey {
    
        case incorrectPassword

        enum key: LocalizationKey {
        

            enum with: LocalizationKey {
            

                enum very: LocalizationKey {
                

                    enum deep: LocalizationKey {
                    
                        case hierarchy
                    }
                }
            }
        }
    }
}

// MARK: - String extension

extension String {
    
    init(key: LocalizationKey, comment: String = "") {

        var string = NSLocalizedString(key.rawValue, comment: comment)
        
        for (parameter, value) in key.parameters {
            string = string.replacingOccurrences(of: "{{\(parameter)}}", with: value)
        }
        
        self = string
    }
}

// MARK: - LocalizationKey

protocol LocalizationKey {
    
    /**
     String value of this key in `Localizable.strings`
    */
    var rawValue: String { get }
    
    /**
     Dictionary with all parameters associated with this key
    */
    var parameters: [String: String] { get }
    
}

extension LocalizationKey {
    
    var rawValue: String {
        return getRawValue(key: self)
    }
    
    var parameters: [String: String] {
        return getParameters(key: self)
    }
}

// MARK: - Helpers

fileprivate func getRawValue(key: LocalizationKey) -> String {

    switch key {
    
    case Strings.chat.categoryTitle: return "chat.categoryTitle"
    case Strings.chat.topBar.leftButton: return "chat.topBar.leftButton"
    case Strings.chat.topBar.rightButton: return "chat.topBar.rightButton"
    case Strings.chat.topBar.subtitle: return "chat.topBar.subtitle"
    case Strings.chat.topBar.title: return "chat.topBar.title"
    case Strings.chat.wrongInput: return "chat.wrongInput"
    case Strings.common.cancel: return "common.cancel"
    case Strings.common.greetings: return "common.greetings"
    case Strings.common.ok: return "common.ok"
    case Strings.keyWithoutFolder: return "keyWithoutFolder"
    case Strings.otherKeyWithoutFolder: return "otherKeyWithoutFolder"
    case Strings.registration.incorrectPassword: return "registration.incorrectPassword"
    case Strings.registration.key.with.very.deep.hierarchy: return "registration.key.with.very.deep.hierarchy"
    default: return ""
    }
}

fileprivate func getParameters(key: LocalizationKey) -> [String: String] {

    switch key {
    
    case Strings.chat.categoryTitle(let category): return ["category": category]
    case Strings.chat.topBar.leftButton: return [:]
    case Strings.chat.topBar.rightButton: return [:]
    case Strings.chat.topBar.subtitle(let date): return ["date": date]
    case Strings.chat.topBar.title(let otherPersonName): return ["otherPersonName": otherPersonName]
    case Strings.chat.wrongInput(let input, let solution): return ["input": input, "solution": solution]
    case Strings.common.cancel: return [:]
    case Strings.common.greetings(let profile): return ["profile": profile]
    case Strings.common.ok: return [:]
    case Strings.keyWithoutFolder: return [:]
    case Strings.otherKeyWithoutFolder: return [:]
    case Strings.registration.incorrectPassword: return [:]
    case Strings.registration.key.with.very.deep.hierarchy: return [:]
    default: return [:]
    }
}
